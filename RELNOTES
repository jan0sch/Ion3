
ion-3-20090110
--------------

This is yet another maintenance release.


ion-3-20081002
--------------

Some minor fixes again, including a few that should've already
been in the previous release.


ion-3-20080825
--------------

This release again fixes some issues found with the previous one.


ion-3-20080707
--------------

This is yet another maintenance release fixing a few issues.


ion-3-20080411
--------------

This is a maintenance release that fixes a few issues in the
previous release.


ion-3-20080207
--------------

.


ion-3rc-20080103
----------------

This release features a few minor fixes to behavioural regressions
in the previous release, as well as some build configuration file
self-documentation improvements.


ion-3rc-20071220
----------------

There are a few minor fixes in this RC, plus a major one related to
layout restore under a session manager.


ion-3rc-20071130
----------------

This RC features various minor fixes, and some clarifications and
simplifications to the license, which people seem to have had trouble
understanding.


ion-3rc-20071109
----------------

It seems people are a bit slow, or only scaring them with a final
release makes them report issues. So, still no stable release but
a candidate, with many minor fixes and improvements wrt. important
omissions. The most important changes are better behaviour of the 
unsplit operation, better handling of main window being closed
before a transient, and use of the workspace's working directory
for run query file name completion.


ion-3rc-20070927
----------------

Another attempt at last "rc" release.


ion-3rc-20070902
----------------

This release features a few minor fixes. If no major problems are
discovered, this is likely to be the last "rc" release before the
first and hopefully final "stable" release.


ion-3rc-20070720
----------------

This fourth "rc" release fixes some minor bugs and omissions in
the previous release.


ion-3rc-20070708
----------------

This third "rc" release again simply fixes some minor problems in 
the previous release.


ion-3rc-20070608
----------------

This is the second "rc" release, and contains primarily bug fixes
and other minor improvements.


ion-3rc-20070506
----------------

This is the first "rc" or "(stable) release candidate" release of 
Ion3. This means that there will not be any further major changes 
to it. Bugs will be fixed, and as an exception to the general 
feature freeze, some hooks may still be added, if deemed useful.
Translations may also be included. After no new bugs (that can not
be deemed features) have been found in this or following "rc" 
releases, the stable Ion3 will be released.

Most of the changes in this release to the previous one already
are bug fixes, in addition to some general clean-up. Other notable
changes are:

  * Winprop matching improvements: it is possible to match against
    `is_dockapp` and `is_transient` (booleans), and there's a hack
    to support `class` and `instance` for dockapps too.

  * The default configuration puts dockapps in the statusbar's
    tray area.

  * The autoconf kludge has been removed, as I will have nothing
    to do with it, and nobody else seems to support or maintain 
    it either.

  * Tab numbers are displayed when releasing modifiers in the
    `Mod1+K` submap.

Distributors should pay heed to the name policy notice in the
LICENSE file.


ion-3ds-20070318
----------------

This may be the last "ds" release if Ion3; if all goes well, the next
release is likely to be an "rc". Some minor improvements will still 
be done, and minor requests may be accepted, so be quick.

The most notable changes in this release from the previous one are:

  * Transients and queries in too small frames are "unsqueezed" out
    of them, unless disabled with `ioncore.set{ unsqueeze = false }`.

  * Some changes in default `cfg_ion.lua`: instead of loading 
    various other files, just `cfg_default.lua` is loaded instead.

  * `mod_tiling.untile` (available in the context menu) may be used 
    to decompose tilings into floating frames. (This is the approximate
    opposite of `mod_tiling.mkbottom` and the "new tiling" context menu 
    entry.)

  * Improved context menus.

  * Slightly improved defaults style, using the drawing engine's
    added possibility of partial borders.

  * Various fixes and other improvements, in particular in relation
    to focus code.


ion-3ds-20070203
----------------

  * There's been changes in padding/spacing usage in styles. Frames
    now surround stuff inside borders not with `spacing` pixels, but
    with `padding_pixels`. Spacing is only used to space things within
    the borders (all the tabs and the client window from each other).
    Consequently, custom styles may need to be updated to reflect this,
    by increasing the padding, possibly also altering/removing colour 
    (to set it to background colour). 

  * The use of drawing engine attributes has also changed, and strict
    ordering of them in the styles is no longer necessary. Additionally,
    much more attributes are supported, including the name of every
    statusbar meter.

  * Xinerama support is gone. In addition to being problematic as such,
    it had bit-rotted, and I will not waste time fixing it.

  * `ioncore.set` no longer supports the `default_ws_params` parameter
    for configuring the default layout. It is replaced by
    `ioncore.deflayout("default", { ... })`, which allows configuring
    other layouts as well, known by `mod_query.query_workspace` (F9).
    Some default layouts are configured in `cfg_layout.lua`.

  * It is now possible to automatically create new workspaces for
    windows with the `new_group` winprop.


ion-3ds-20061223
----------------

There's nothing major in this release, primarily just some minor fixes 
and tuning to the previous release, that it was time to release.


ion-3ds-20061029
----------------

Mostly this release still fixes issues in the big 3ds-20061015 release,
but in addition there are some improvements in the query department:

 * Query activation key now cycles completions (So e.g. the
   in the context menu activated with META+M, this same key
   can be used to cycle through the alternatives.) This does
   not work for queries activated by submap bindings.

 * Likewise, it is no longer necessary to specify the key to
   use for cycling for `mod_menu.grabmenu`.

 * Control+R can now be used for history completion in queries.
   (Currently matching is done for full string up to 'point', but 
   this may be changed to substring match.)

 * Note that the parametrisation of WEdln.complete has changed,
   and the second cycle parameter must be 'next' now instead of
   `true`.


ion-3ds-20061020
----------------

Fixes some (expected, but minor) issues in the previous release.


ion-3ds-20061015
----------------

 * WIonWS and WFloatWS and the corresponding modules are gone, and
   your custom configuration files will be broken with regard to these.
   However, a partial backwards compatibility hack exists for layout 
   savefiles.

   The F9 and META-F9 bindings now by default create workspaces with
   a tiled layout of two frames. To create an "empty" workspace,
   corresponding to the old WFloatWS, use the context menu (META-M)
   and choose "new-empty-workspace". It is also possible to change 
   the default layout.

 * Note that if you restart from an old version to this new version of Ion,
   transients will stop working as expected for already existing windows.
   They will work for newly-created windows, however.

 * There are a few new sets of binding (including one for `WClientWin`!),
   and some old bindings may not work exactly as expected anymore. In
   particular, those for switching to full-screen mode. 

   **It is probably best to start from scratch with your custom 
     bindings.**

 * `WFrame.set_tabbar` is gone. If you absolutely want to get rid off 
   the tabs, you must change the frame's "mode" with `WFrame.set_mode`. 
   The mode "tiled-alt" has been intended for this, and the corresponding
   "framed-tiled-alt" style defaults to `bar = "none"`.

 * The rather popular `detach.lua` script from the scripts repository
   is obsoleted now, as Ion includes detach functionality in itself.
   To detach a window, use META-K D in the default bindings. To tile
   an existing frame from a workspace that doesn't have a tiling yet,
   use META-K B.
   

ion-3ds-20060519
----------------

Some notable changes in this release include

 * Lua 5.1 is now required.

 * Framed transients on by default now. New binding contexts
   "WFrame.toplevel" and "WMPlex.toplevel" were added to allow
   for separate sets of bindings for nested transient frames and
   top-level frames. Some of the bindings in the default binding
   maps that are likely to be unwanted on transient frames were
   moved to these contexts. Old custom bindings will continue to 
   work unless they modify the defaults by unbinding some of the
   moved bindings.

 * Pressing Mod1+K K in the default bindings now switches to any
   region with the "activity" flag set (indicated by the a box
   at a corner of the screen), if there's one, before cycling to 
   previously active region. The same effect can be achieved in
   your custom bindings with

        ioncore.activity_goto() or ioncore.goto_previous()


ion-3ds-20050607
----------------

This release mostly features minor bugfixes and other improvements. The most
visible non-bugfix changes are:

 * Faster "fontset" filling kludge: only `-misc-fixed-*` fonts are tried. Ion
   should now load faster in UTF-8 environments, and usually with no less
   fonts in the fontset than before. (UTF-8 string drawing still does not
   fully utilise these fonts under XFree86, but it does under XOrg.)

 * Experimental auto-show-completions support, which is also on by default
   now. In this mode the Tab key can be used to cycle forward through the
   completions, and Shift+Tab backwards. Modify the settings seen in the 
   new `mod_query.lua` to get normal Tab-completion, or change the completion
   delay.

 * The release scripts do not run automatically autoconf anymore so maybe
   a few more people would look into the README first.


ion-3ds-20050322
----------------

The most visible changes in this release are:

 * Mod1+space now toggles the scratchpad by default and Mod1+D the dock.

 * The `ion-(ssh|man|view|edit)` wrapper scripts were removed and instead
   the programs used can be configured in Ion's configuration files.

 * `ioncore.exec(_on)` also support the `:cmd` notation for "run cmd in 
   xterm" familiar from the run query. The `::cmd` notation can be used 
   to ask for enter to be pressed even when the program quit succesfully.

 * Those with custom configuration files should note that many exported toggle
   functions were changed and renamed, and now accept a string parameter
   incidating whether to toggle, set or unset the property.
  
    - `WClientwin.set_fullsreen` (replaces `WClientWin.toggle_fullscreen`)
    - `WRegion.set_tagged` (replaces `WRegion.tag/untag/toggle_tag`)
    - `WFrame.set_tabbar` (replaces `WFrame.toggle_tabbar`)
    - `WFrame.set_shaded` (replaces `WFrame.toggle_shade`)
    - `WFloatFrame.set_sticky` (replaces `WFloatFrame.toggle_sticky`)
    - `WMPlex.l2_set_hidden` (replaces `WMPlex.l2_hide/show`)
    - `mod_sp.set_shown(_on)` (replaces `mod_sp.toggle(_on)`)
    - `mod_dock.set_floating_shown_on` (replaces `mod_dock.toggle_floating_on`)
    - `WRegion.set_activity` (replaces `WRegion.clear_activity` and 
      `WRegion.notify_activity`)
      
   For example, `WRegion.set_tagged(_, 'toggle')` should be used in place of
   `WRegion.toggle_tagged(_)` now.

Obviously there are some other changes and fixes too. See the changelog
for details as usual.


ion-3ds-20050304
----------------

This is mostly a bug fix release, but also features improved
`mod_query.query_exec` (F3 key) completion support. Script writers should be
aware that As a side effect of one of these bug fixes, many hooks are now 
called in "protected mode" and can not call any functions that modify the 
internal state of Ion, except ioncore.defer.


ion-3ds-20050227
----------------

The most important changes in this release are:

 * So-called "placeholders". With the help of these the positions of
   full-screen windows are remembered in their original frames, and don't
   just get inserted after currently active window when returning from 
   full-screen mode. Under a session manager placeholders are also used
   to remember the original order of windows.

 * Improved `mod_statusbar` and `ion-statusd` communication, and colouring
   of important/critical meters.

 * A number of small fixes.


ion-3ds-20041104
----------------

This monthly snapshot adds a few new and improved features.

 * 'Grabbed menus' that have a single cycling key and activate selected
   entry when all modifiers have been released. See

   <http://iki.fi/tuomov/repos/ion-scripts-3/scripts/wcirculate.lua>
   
   for an application.

 * Potentially blocking status meters are now in a separate ion-statusd
   program. Please write your additional status meters that do not monitor
   the state of Ion itself for ion-statusd (and contribute them in the
   Ion3 scripts repository at <http://iki.fi/tuomov/repos/ion-scripts-3/>).
   For help on writing such status meters, see e.g. source for
   `statusd_load` in `ext_statusbar/ion-statusd`.

 * Floating splits are now supported on plain tiled workspaces as well as
   on pane workspaces. To create such a split, use the workspace context
   menu (Mod1+M by default) or write your own bindings.

 * Line editor now supports history search; Control+Up/Down only scrolls
   through history entries with matching initial part.

 * Arbitrary winprop matching criteria is supported. Lua scripts have
   access to X properties.
 
Of course there are some other minor fixes and improvements as well.


ion-3ds-20040906
----------------

This release finally includes a usable (yet still incomplete) version
of the `mod_panews` workspace module (that has also bored the name 'autows'
and 'rubberws' previously). The final outcome is not exactly what I
initially planned, as those plans turned out not to be that workable.
Instead, what `mod_panews` does is add to the basic tiled ionws approach
overlappable splits and automatically filled panes that are initially
empty. Each window is classified and assigned to the pane matching that
classification. (The default classifications are T(erminal), V(iewer)
and M(iscellaneous).)

For a better feel for it, try it out yourself and please give feedback.
The overlapping panes may be a bit confusing (this is one place where
true translucency might actually be useful and not just eyecandy) at
first, but you'll get used to them if you use the feature, and e.g.
the Gimp works quite splendidly with the toolboxes in the 'M' pane and
image windows in the 'V' pane --  although the simple initial size-based
classification heuristics don't always get it right and overriding
winprops (setting: `panews_classification`) should eventually added. 

In addition to the new module, this release adds support for translations
of program messages and the manual page, regardless of whether such is
of any use in a program like Ion or not. (Currently Finnish and Czech
translations are available.) Of course there are some bug fixes and
other minor additions as well, and the `./configure` script is also back,
the abandonment of libtool being final now. 


ion-3ds-20040730
----------------

The first thing you'll notice when you start up this release of Ion is
that isn't reading your old configuration that. The next thing you 
should notice is a neat layout-adapting statusbar at the bottom of the
screen. That's right, Ion now includes an `ext_statusbar` Lua script that
is enabled by default and displays date/time/load/mail count in a
configurable format.

So why is it not reading your configuration and save files? Firstly,
all of the `.lua` files were renamed to be indicative of their purpose.
Secondly, there have been so many changes that your old files would be
incompatible anyway.

The `.lua` files are now named as follows:

    cfg_*.lua    Configuration file that the user may wish to edit
    look_*.lua   Drawing engine style file
    saved_*.lua  Save file
    mod_*.lua    Module stub loader
    ext_*.lua    A bigger Lua extension without a C counterpart
                 so that it is not a module
                 
The configuration file for `mod_foobar` or `ext_foobar`, if it has one, is,
of course, `cfg_foobar.lua`. In the topic of file names, also note that 
the default installation paths and binary names have changed to include
the component '3' to reflect the situation with many binary packages
of Ion.

You perhaps noticed above that modules have stub loaders now, so the 
user has no need to use the `ioncore.load_module` routine. All extensions
and additional configuration files can now be loaded  with 'dopath'
(used to be 'include'). Also, the `menulib`, `querylib`, and `ioncorelib`
Lua libraries are gone and instead their contents can be found in the same 
`mod_whatever` namespace with the corresponding module (the "stub" loader
for these modules is a bit more than just a stub...). Some may also
want to know that for `mod_*` and `ext_*` only the compiled .lc files are
now installed, and not the source `.lua` files, thus removing redundant
files and making the installation slightly smaller.

There are few other changes to the contents of the configuration files
as well, so you're probably best off simply rewriting your modified
configuration files based on the new defaults. There quite likely won't
be any more _big_ changes to the configuration files before the release
of final Ion3, wherever that will be. (Most likely we won't see 3rc:s
yet this year.) However, some functions and variables are still likely
to be renamed or changed.

In addition to being renamed, the layout savefile of this Ion release
is incompatible with older releases. This is due to the changes made
to the `WIonWS` (and `WAutoWS`) split tree code to make it more modularly
extensible with the new kinds of nodes that `WAutoWS` requires.

The `mod_autows` module has infact been through many changes since the 
last release, and I think I have the final form of it finally figured
out. However, it is still far from finished and unlikely to be ready 
for use yet.


ion-3ds-20040703
----------------

The major new features of this snapshot release are:

 * `WMPlex` support for a sticky status display area to which `WIonWS`s
   adjust properly. Modified to the dock module to support this method. 
   See the new `dock.lua` to set up the dock in the new embedded or old 
   floating manner (the API for the latter has also changed).
 * Primitive session management support.

There are also some bug fixes and many minor improvements; see the ChangeLog
for details. Work on `mod_autows` has also started, but it isn't ready for 
use yet.
 

### Note on ./configure:

./configure does not exist for the moment as the source autoconf script
is not up-to-date. Ion no longer uses libtool/libltdl due to problems
with inter-module dependencies, and I have not asked Tom Payne to fix
the script yet, as this change may not be final (although that is most
likely the case; those without Linux-compatible libdl and a flexible
binary format such as ELF will just have to link statically against the
modules).


### Notes on session management:

Ion loads `mod_sm` automatically when the SESSION_MANAGER environment 
variable that should be set by the session manager is set, so there's 
no need load it in `ion.lua`. 

When session management is in use, all entries in the 'Session' menu
(previously 'Exit' menu) actually invoke the session manager to do the
task. 'Save' asks the SM save the whole session and 'Exit' (ioncore.shutdown)
asks it to shut down the session instead of just causing the WM to quite.
To do the latter, use ioncore.resign.

Unfortunately, all session managers I have tried (from Debian/unstable), 
are broken/incomplete in one way or another:


xsm: doesn't support any requests from applications. This makes Ion's
session menu complete unfunctional. The only way to restart/exit/save
state is through xsm's window.


gnome-session: This seems the most complete of the all the session managers
and works fine until it is requested to shut down the session, when it dumps
core and session state is lost if was not explicitly saved previously.

A `~/.gnome2/session` file to use with Ion follows:

    [Default]
    num_clients=2
    0,id=default0
    0,Priority=0
    0,RestartCommand=gnome-smproxy --sm-client-id default0
    1,id=default1
    1,Priority=10
    1,RestartCommand=/usr/local/ion-3/bin/ion -smclientid default1


ksmserver: Only supports a global shutdown request, so that Ion can not be
restarted or session state saved in the middle of a session.


ion-3ds-20040316
----------------

This is the first development snapshot release of what is to be Ion3. 
The most visible changes to Ion2 so far are:

  * Default installation directory is `/usr/local/ion-3` while user
    configuration files go in `~/.ion3`

  * The `mod_sp` module was added. It creates an extra toggleable 
    "scratchpad" frame on each screen. Toggle is for now bound by default 
    to Mod1+section, which should be very conveniently located on most 
    Nordic keyboards (left of "1"), but you may have to change it. The 
    scratchpad should be nice for xconsole or similar monitors, xmessage 
    and other popups and just as temporary holding space for windows.

  * All modules except the drawing engine are now called `mod_something`.

  * Man-page complection supports a cache of known man-pages for faster
    completion. See the README for instructions on setting up a cronjob
    or manually generating the index if you want to use the feature.
    Also `query_man_path` is no longer used. Instead we try the 
    `ION_MC_MANPATH` and `MANPATH` environment variables and the 
    'manpath' program.

  * Exported functions are now separated into tables (namespaces)
    instead of cluttering the globals table. Some frequently used
    configuration functions are imported into the globals table, though.
    Some functions have also been removed or renamed for simpler and
    more consistent function set.

  * New binding configuration mechanism. Dozens of `*_bindings` functions
    were replaced with a single `[ioncorelib.]defbindings` function that
    accepts a context parameter. Callbacks are specified as strings
    (although passing functions still works) to make it easier for
    external configuration programs to understand the configuration 
    files and perhaps remove some confusion among users who do not
    care to read a tiny bit of Lua documentation and understand the
    concept of anonymous functions.

  * It is now also possible to retrieve a list of bindings with
    `ioncorelib.getbindings`, for example, for self-documentation.

  * Single move/resize mode bindings instead of separate for both
    ionframe and floatframe.

There are also quite a few internal changes; see the ChangeLog for
details. No documentation tarball is available at the moment as the
documentation is out-of-date except for the function reference. If 
you need the reference, just checkout the documentation from the 
Subversion repository with

    svn co http://tao.uab.es/ion/svn/ion-doc/trunk ion-doc-3ds

and build the documentation.


ion-2rc-20040114
----------------

This release is finally what can be called "Ion 2 release candidate #1". 
No more new features will be added to "Ion 2" after this release, and the
configuration interface has already been frozen for a while. I will wait a
couple of weeks for bug reports, and if nothing serious is found, the new
stable Ion should finally be released then.

The most notable changes since the previous release are:

  * The dock module is included
  * An optional autoconf script was added
  * A few minor bugs were fixed
  * Some incomplete features were polished, especially focus control on
    floatws, and:
  * Changes in X keyboard map are supported now (so e.g. switching to 
    dvorak after Ion has started should update the bindings to match the
    locations of symbols in the dvorak layout).


About the version numbering scheme:

Due to a demand of a version numbering scheme more indicative of the status
of the project, I was thinking of various different new version numbering 
schemes for this release: ion-2rc1 (then 2r1, 3d1, etc.), ion-2-20040114-rc1, 
ion-2.20040114rc1, ion-20040114-2rc1, etc.). It would've been nice if 
simple  lexicographical sorting could be used to order the packages, but 
in the end I decided to stick with a scheme that is consistent with the
'ion-devel' package names:

    project-branch_and_status-release_date

Therefore this release is 'ion-2rc-20040114', and the "stable" one will be
'ion-2-20040???'.


ion-devel-20031211
------------------

This is a big clean-up release. The most noticeable changes are that 
'-devel' has been removed from path names, user configuration files go
in `~/.ion2/` and the main configuration file is 'ion.lua'. (The other 
`ioncore-*.lua` files have also been renamed.) There have been no notable
changes in the configuration files themselves, so your old files will 
work if you move them to the correct directory and rename the changed
files. (`mv ~/.ion-devel ~/.ion2; cd ~/.ion2; mv ioncore.lua ion.lua;`
etc.)

This release also finally contains a working PWM binary. (The ioncore+
scripts scheme was replaced with separate binaries statically linked
to ioncore.a.) Floating workspaces now support edge snapping and 
sticky windows, but some PWM features are probably still missing.

Some bugs were also fixed and users are now force-fed the manual page 
the first time Ion is started. Transients can be toggled between
top/bottom of the main window with Mod1+K T. The SSH query uses
`~/.ssh/known_hosts` for completion instead of a manually defined list.

There may be a few additions (e.g. the dock) and bug fixes, of course,
before the stable release, but this release should pretty much be what
the new "stable" Ion should look like. Please upgrade to it to help
weed out the bugs. Note that you need to upgrade Lua to the 5.0.1 
pre-release.


ion-devel-20031119
------------------


It's finally time for a new release on Ion's development branch. Most
likely this will also be the last "big" release before finally, after
almost two years, releasing a new "stable" version of Ion. A few bug 
fix and code clean-up releases should appear in between, though.

The most important additions, changes and non-changes in this release
are:

  * Menu module
  * A little less broken extended character set and string encoding 
    support
  * Extended WM hints fullscreen request support
  * Hopefully a little clarified configuration file layout
  * Quite a few fixes
  * And most important of all:

>    Configuration files written for the previous release should
>    still work this time!

(However, Ion will complain of old drawing engine styles.)

The menu module provides both drop-down menus (in the stock configuration
pressing Button3 on a tab should show a context menu) and query-like 
"in-mplex" menus (F12: main menu at screen level; Mod1+M: the same context 
menu as above at frame level).

What was done enhance support for strings (mostly window titles) in 
languages that need more than 8-bit character sets is:

  * Remove UTF8 restriction and support almost arbitrary multibyte 
    encodings instead. (Statefull encodings will not work and combining 
    characters can cause clutter. Both are a sign of bad encoding, IMHO.)

  * The XCreateFontSet routine that is used to load fonts in the kind
    of structure the X utf8 and multibyte routines want apparently wants
    to be able to load glyphs for all character sets specified in the 
    locale and therefore often fails if only single font is specified. 
    Therefore a kludge was added that tries loading more fonts while 
    keeping the fonts' size the same. (The ",*" kludge could load huge
    fonts). Unfortunately this has a noticeable effect in startup time :(.

  * There is no longer a system.mk option to enable utf8 (now multibyte)
    support, but must still specifically be enabled with the -i18n
    command line switch, mostly thanks to troublesome utf-8 locales.

Because Xlib's UTF-8 string drawing code is broken and very unlikely to 
be fixed, decent text output in an UTF-8 locale is still unlikely and 
dependent on the fonts loaded in the system. The Xmb routines that are now
used always use an iso10646-1 font even if other fonts are loaded and the 
unicode font does not contain a particular glyph to be drawn. The use of 
the Xutf8 routines  in an utf8 locale can be enabled with the
`CF_DE_USE_XUTF8` compile-time  option. The advantage of this is that 
these routines seem to choose the font to draw particular character in 
most cases more sanely. The downside is that there are other more serious
problems with unknown characters.

All in all, even if I'd like to support a universal move to UTF-8, thanks 
to Xlib brokenness I can't really recommend using UTF-8 locales with Ion 
and the default drawing engine if there's a decent alternative encoding.
Most if not all other stateless encodings shouldn't have the problems 
UTF-8 has. An alternative drawing engine that didn't use the Xlib i18n
string drawing routines might solve the troubles with utf-8 support.

One more note:

If you have saved a custom system.mk, you'll need to set LUAC
point to the Lua compiler there as some of the share/ files
are compiled now.


ion-devel-20030810
------------------

It's been a while since the previous release as I wanted to freeze the
Lua configuration/scripting interface for this release and therefore 
finish work on a few things. Well, on my part the interface is frozen,
but I will still accept constructive complaints for a short time and
after that the implemented parts of the scripting interface will be 
frozen. But in all likelihood, if no one has anything else to say, but
"it's ok", "it sucks", the interface will no longer change, only possibly
grow.

What's new for this release then?

  * Drawing engine module support.
  * OO-style exported functions. The old `class_fn` functions are now
    `WClass.fn` (an ugly wrapper is provided in `compat.lua`).
  * No more screen-specific configuration or savefiles.
  * Session name (can be specified on command line) instead of display
    name based savefiles. Also affects query history and not just workspace
    saves.
  * Bug fixes, most small and one bigger (almost complete rewrite of 
    the split resizing algorithm).
  * Some documentation improvements.

Converting configuration files.

Old `.lua` colour schemes and workspace save files can be automatically
converted to a format suitable to be loaded by this latest release.
Other files will have to be ported manually. To convert colour schemes,
use the script `utils/lookconv.lua`. The usage is

    lookconv.lua look-old.lua > look-new.lua

To convert workspaces savefiles, use the script `utils/saveconv.sh`. 
The usage is

    saveconf.sh ~/.ion-devel/saves/workspaces-DISPLAY.*.lua \
        > ~/.ion-devel/SESSIONNAME/workspaces.lua

`DISPLAY` here is the actual display part of `$DISPLAY`, probably just `:0`.
'*' stands for all screens (if you have only one screen you could do with
perhaps just `workspaces-:0.0.lua`). SESSIONNAME is the name of the session
where you want to use the converted savefiles. Default session name for
`DISPLAY` is `default-session-DISPLAY` with the colon in `DISPLAY` converted
to a dash. For most people this is `default-session--0`. In the simplest
case the whole command line is therefore

    saveconv.sh ~/.ion-devel/saves/workspaces-:0.0.lua \
        > ~/.ion-devel/default-session--0/workspaces.lua

The scripts may or may not work and are only provided as a potential
convenience that will not be maintained and will be removed eventually.


ion-devel-20030623
------------------

Quite a few bug fixes and one most likely unnoticeable improvement:

2003-06-23:

  * Fixed pointer warping on screen change.
  * A bug in grab handler calling code could crash Ion when leaving
    keyboard resize mode manually.
  * Resize display was showing incorrect values for keyboard resize.

2003-06-21:

  * Client window last height request bookkeeping code had been lost
    when configure request policy was changed. This caused transient
    sizes to be calculated incorrectly.
  * Return from full screen mode to floatws had been broken.
  * As the number of dynamic functions has been getting bigger, the
    functions are now sorted on first use and then binary-searched
    instead of naive linear searching.
  * Screen lookup had been broken for windows that are not properly
    on any screen.


ion-devel-20030620
------------------

Just some bug fixes and minor behavioural changes and improvements in
this release:


ion-devel-20030617
------------------

This release fixes some small problems with the previous release and
adds a workaround kludge for the XFree86 textprop bug (it's been fixed
but no release with the fix is available) that could cause Opera to 
crash Ion when UTF8 support was enabled. I also added the winprop
needed for galeon's find dialog to default `kludges.lua` and there's
some extra documentation and defaults for some systems in system.mk.


ion-devel-20030614
------------------

Most changes in this release centre around making Ion more tolerant
to broken configuration files; for details see the ChangeLog. There
are also changes in binding configuration as I already mentioned in
an earlier poting. Namely `common-frame-bindings.lua` is gone and the
bindings previously set there (into variables that the `*ws.lua`
files later referenced) were moved to `ioncore-bindings.lua` and are
set using the new functions `mplex_bindings` and `genframe_bindings`
are were  added. Old modified configuration files should still work,
however, but if you use `make_active_leaf_fn`, you will need to 
include `compat.lua` as the `global_bindings` that used this were
replaced by bindings in `mplex_bindings` and the function
`make_current_clientwin_fn`.

There are also some (minor) bug fixes and a few other improvements 
worth a mention. In particular all regions are now given names of 
the form  `WFoobar<n>` by default and `DEFAULT_MOD.."F9"` was bound to 
create a new workspace without asking for a name. This binding and 
`QueryLib.query_workspace` use the workspace type defined in the 
variable `default_ws_type` instead of being hardcoded to `WIonWS`.

All objects passed to Lua now have a unique userdata (a `WWatch` 
cached in a weak table) so they can be used e.g. as indices to tables. 


ion-devel-20030606
------------------

This release unifies some parts of `WScreen` and `WGenFrame`, which makes
screen-level queries possible. (Later the queries for small frames might
be changed to be shown at screen level.) The statusbar restriction from
ion-devel-20030531 was also removed by this some change and a few
non-fatal bugs have been fixed.


ion-devel-20030601
------------------

A bug was discovered:

2003-06-01:

  * An off-by-one error in `extl_l1_finalize` caused references to some
    Lua tables (including large completions) never to be released.

It could be that this bug was causing some other errors in Lua as well.
Sometimes QueryLib bindings failed because some function generators
returned nil although they shouldn't. Adding dummy lines (!) in those
functions fixed the problem and for some reason this patch also seemed
to remove those problems.


One more note: as `ioncorelib.lua` and `querylib.lua` are now installed
in `$SHAREDIR`, you must remove the old files in `$ETCDIR` if installing
over a previous release or else there will be errors. You should also
not use any possible old copies you have in `~/.ion-devel/`. (One of the
reasons for moving these to `$SHAREDIR` is to stop users from making
copies of them as they are not configuration files.)


ion-devel-20030531
------------------

As the subject line says, Ion-devel-20030531 was just released. The short
list of changes is:

 * The license was changed from the Clarified Artistic License to the
   GNU Library/Lesser General Public License (LGPL).
 * Screen, viewport and root window renames and other changes (see below).
 * Some installation directory changes; the ion-* helper programs are now
   installed either in `$SHAREDIR` or `$EXTRABINDIR` and QueryLib searches 
   for them on the script path (`~/.ion-devel/`, `$ETCDIR`, `$SHAREDIR`, 
   `$EXTRABINDIR`) instead of assuming them being on `$PATH`.
 * Client windows are now in a separate namespace.
 * Resize/maximize/shade changes: Shading should work on `WIonFrame`s too
   and shade mode is automatic when the client area gets too small when
   resizing. Maximize toggle restores frame to previous size if shaded
   instead of maximizing. The move/resize mode bindings were changed again
   to be more consistent and predictable: Left/Right/Up/Down and F/B/P/N
   grow the frame in the specific direction, Shift+keys shrink and in
   case of floating frames, `DEFAULT_MOD+keys` move
 * Returning from full screen mode should work on `WFloatWS`s too.
 * Lots of minor fixes, export additions and clean-up.

As usual, see the (long!) list of new ChangeLog entries at the end of
this message for details.


I've finally personally switched from the old "stable" 20020207 to using
the latest development release at home too and I must say that it is
finally starting to look good. There are still things to be written, but
unless you need "proven" stability, I see no reason to sticking to that
old release anymore. Unless, of course, if you find a problem that I have
not encountered or simply have no need for the new features and don't want
to port your configuration files.


On screens, viewports, root windows and problems with the new
implementation

The objects previously called "screens" are now called "root windows"
and what were called "viewports" are called "screens" to better reflect
what the user sees. (When Xinerama is not used there's no difference
between a root window and a screen, but when Xinerama is used a root
window may be split over multiple screens.)

This release also creates so-called virtual root windows for each
Xinerama screen when there are more than one. This is to better separate
the windows on different screens and thus emulate normal multihead, the
main difference being that windows can be moved between screens.
Especially the virtual roots are there to keep the windows that are on
a floatws on the right screen.

Virtual root windows will, however, break a few apps:

 * Mozilla -remote won't work because of its crappy method for looking
   up existing windows that can't handle multiple levels of WM windows.
   Nested workspaces have the same problem. There is, however, a simple
   solution to this problem: gnome-moz-remote. It seems to use a saner
   method for looking up an existing Gecko browser and also works with
   at least Phoenix/MozillaFirebird and Galeon.

These two are problems only if you use floatws:s (other problems with
which virtual root windows are intended to solve):

 * The background-setting apps I am aware of will require a following
   'xrefresh' for the changes to be updated to the (transparent) virtual
   roots. Background setting apps that support the `_NET_VIRTUAL_ROOTS`
   property (which, I think, was meant for root window-sized WS 
   backgrounds) could be used to set a separate background for each
   Xinerama screen, though. I am not aware of any such app.
 * Some apps' resize and move features will behave erratically on those
   Xinerama screens not at (0, 0) on the root window. This is again
   because the apps are assuming there's at most one WM window between
   them and the root and are requesting windows' positions incorrectly.
   The ICCCM is quite vague on this and I think _all_ apps that I have
   tried are doing it wrong but the way e.g. XMMS does it certainly is
   not an interpretation of the ICCCM. The apps that now behave correctly
   request position for the outermost WM window. Nested workspaces have
   the same problem.

There is one more temporary problem:

 * Status bar modules (and the dock module's statusbar mode) will be
   *temporarily* broken when virtual roots are _not_ used. This will be
   fixed later when parts of screen and frame code are unified (it should
   then be possible to run Ion without any workspace modules and have
   queries attached to screens). In the meanwhile, if you don't care about
   the above-mentioned problems and want a statusbar (which probably needs
   to be ported to this release), you can defined `CF_ALWAYS_VIRTUAL_ROOT`
   when compiling Ion.


ion-devel-20030510
------------------

There are quite a few small fixes and minor enhancements invisible to
the user in this release. The splitting functions were renamed to be
more consistent and there are a couple of enhancements in the Lua code
query that should make it much more usable. First, tab-completion can
now descend into tables and complete subexpressions. Secondly, the local
variable `_` in addition to 'arg[1]' is set to point to the the frame in
which the query is executing. 

I have also written some new documentation that is now available from
the Ion web page.


ion-devel-20030506
------------------

The most notable change in this release is that the `target_id` system
was removed and instead client window status is also saved over
restarts in the saves/workspaces-* files. (It shouldn't be too hard
to hook a session management module over this.) Thanks to this
modification, floatframes can also save their status now. Note
that if you restart from older version of Ion to this one, client
window layout will be messed up.

There are also a few bug fixes and code to save and load line editor
history was added.


ion-devel-20030503
------------------

There are lots of minor improvements in this release, see the
new ChangeLog entries for details.


ion-devel-20030427
------------------

Some minor feature enhancements and a few fixes in this new release:

The file system scanning completions are now put in the background
by receiving the data from external programs through pipes and select()
for data in the main event loop. This way long taking completions don't
block Ion from processing other events and NFS problems shouldn't hang
it.

Basic window stacking management support code was added. Transients
on floatws:s should now be stacked above their parents. If you don't
want to change your modified binding configurations at this point and
need the functions `floatframe_raise/lower`, include `compat.lua`.


ion-devel-20030412
------------------

This release again fixes some minor problems and enhances a few
features. Most of the enhancements are related to UTF8 support and
the floatws module. If UTF8 support is enabled, Ion now tries to
load the "fixed" font at startup after setting up locales. If locales
aren't properly set up, this probably fails and Ion will reset locale
back to "POSIX" as this might make fonts loadable although support for
non-ASCII characters will be crippled. It might now be safe for
package maintainers to enable UTF8 support by default

As apps seem to have switched to using `_NET_WM_NAME` for UTF8 titles
and filling `WM_NAME` with crap, this property is also preferred over
`WM_NAME` if set. Support for some other "extended" WM hints might be
added in the future but I have no intentions of moking Ion NetWM-
compliant. I might have thought of attempting to do so a few years
ago when I last read the specification but it seems that since then
they've filled it with lots of pointless bloat that may even be in
opposition to Ion's goals. Take multi-parent transients, for example. 

Full error log is also displayed with xmessage on startup whether
it is possible to continue or not.


ion-devel-20030410
------------------

There was a bug in QueryLib written yesterday, therefore this release.


ion-devel-20030409
------------------

I started converting the query code to Lua and discovered some rather
silly bugs in the Lua interface so here's a new release with the new
and improved query code included. The names of queries have changed
(they're all in the table QueryLib defined in `querylib.lua` -- only
`query_query` and a few temporary handlers are implemented in query.so)
so your modified configuration files will be broken again :(.


ion-devel-20030408
------------------

Be prepared to completely rewrite your configuration files once
again: a new version of Ion-devel has been released that uses Lua
<http://www.lua.org/> for all configuration. Version 5.0 of the
language/library is required. Although scripting possibilities
are now much better than before, there is one rather big drawback:
Lua is not nearly as error-tolerant as Ion's old configuration
parser so a syntax error in a file will cause the file not to be
executed and may even cause Ion not to be able to start. More
comments and documentation on scripting will follow at a later time.

Libtool and libltdl are also now used to implement module support.
Hopefully this will make compiling Ion easier on a wider range of
platforms. (On the other hand, this could also induce new problems.)

Finally, the preferred linking address for Ion's home page is now
<http://www.iki.fi/tuomov/ion/>. The pages are still located at the
old address, but this redirected address should be more permanent.


ion-devel-20030327
------------------

Just some minor fixes, binary rename and better embedded workspace
support in this release. I'm still contemplating whether to convert
Ion to C++ and haven't written many things that I intended to as
that decision will affect how those are implemented.

To create an embedded workspaces in a frame, at the moment you have
to modify the appropriate workspace save file (when Ion is not running!)
by  adding lines such as

    region "WFloatWS", "testiupotus" {
    }

inside the frame definition after the other options (flags, `target_id`;
those options will be ignored if after any region definitions).

One more thing to note: debugging infos are no longer automatically
stripped from the ioncore binary or modules by 'make install' so that
I don't have to explain how to get proper backtraces every time a bug
is found. If you you are confident that you can send me proper backtraces
when you find a bug (or maybe can fix it yourself), you can make the
binary and the modules a _lot_ smaller by running 'strip' on them.


ion-devel-20030311
------------------

The list of new ChangeLog entries is long this time, but I'm finally
starting to get to what I started working on almost two years ago. Yes,
there is *experimental* support for PWM-like "floating frame" workspaces.
A lot of the functionality is still missing -- no need to complain of
such at the time -- but the floatws.so module and basic functionality
is there. Most notably perhaps a menu module is not yet implemented.
(Porting the PWM menu code should a nice little task for whomever
interested... *wink*.) To create some PWM workspaces, load the floatws.so
module (should be loaded by default) and in `query_workspace` (F9)
prefix workspace name with 'WFloatWS:' (or load the module before
ionws.so). 

This release is also finally fully modularised: In addition to the
ion core binary that can not function alone, there are the modules
ionws.so, floatws.so and query.so. It is also possible statically
compile the modules in the core binary if the system doesn't support
libdl.

There's also *experimental* UTF8 support that must be specifically
enabled from system.mk. You must have XFree86 (4.x?) and C99 wide
char support available (either libc directly or maybe libutf8+libiconv).
Thanks to bugs (?) in some of the XFree86 Xutf8 functions, your locales
must be properly set up or else X will stop drawing strings at non-ascii
characters instead of ignoring them. See my earlier rants on the mailing
list for reasons on not using the more standard Xmb functions.
To actually see any special characters, you must load the necessary fonts
by specifying a comma-separated list of fonts to the font and `tab_font`
draw.conf options. Multiple font loading does not work when Xft support
is enabled at the time being.

There has been a lot of changes in the config files, again, and I can
promise there's still more to come. See the ChangeLog for details.
If you want to use your old workspaces configurations, move them to
`~/.ion-devel/saves` and replace the strings "WFrame" and "WWorkspace"
with "WIonFrame" and "WIonWS", respectively.


ion-devel-20030225
------------------

I've made the bugfix release as promised. Get it from the usual place.


ion-devel-20030223
------------------

There's a new major development release available from Ion web page.
Not many changes are visible to the end user, though, but a lot was
rewritten to be more flexible and simpler; see the ChangeLog for a
full account. The older development release is also still available
because this release can not be considered as stable after major
changes to the code. The most visible changes are

  * Changes in binding configuration
  * A (mostly) working full screen mode toggle (see below)
  * The ability to switch workspaces while dragging tabs (experimental)
  * The ability to re-read draw.conf without restarting Ion
  * Some bug fixes.


Some notes on full screen mode toggle:

 * Ion doesn't detect programs trying to leave full screen mode--it
   should be possible to devise some method using window properties,
   however.
 * At least Opera unmaps the window also before changing the size to
   enter full screen mode, so Ion doesn't remember the last frame.
 * Mozilla sometimes has trouble entering full screen mode but when it
   succeeds, Ion remembers the last frame. However, if
   `clientwin_toggle_fullscreen` is used to leave the full screen mode
   started from Mozilla, Mozilla doesn't know that the mode has been
   left.

Clearly there should be some method of communication between Ion and the
programs for full screen toggles to fully work. At the moment I suggest
using `clientwin_toggle_fullscreen` instead of the programs' native toggles
unless the program has some special full screen mode and you really want
it.
